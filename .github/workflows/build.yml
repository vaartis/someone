name: Build

on:
  push:
  release:
    types: [ published ]

jobs:
  test-linux:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install deps
      run: |
        # Install a newer version of LLVM
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 14

        sudo apt-get update && sudo apt-get install -y build-essential cmake xorg-dev libgl-dev\
             libudev-dev libasound2-dev libpulse-dev libreadline-dev libncurses-dev libglew-dev\
             xvfb

    # Uncomment to allow SSH access into the environment for debugging
    #- name: Setup tmate session
    #  uses: mxschmitt/action-tmate@v3

    - name: Build and run tests
      run: |
        mkdir $GITHUB_WORKSPACE/_build && cd $GITHUB_WORKSPACE/_build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DSOMEONE_TESTING=TRUE -DCMAKE_C_COMPILER=clang-14 -DCMAKE_CXX_COMPILER=clang++-14
        # Run Lua tests
        xvfb-run -a -s "-screen 0 1920x1080x24 +extension GLX +render" make -j $(nproc) lua-test
        # Run C++ tests
        xvfb-run -a -s "-screen 0 1920x1080x24 +extension GLX +render" make -j $(nproc) cpp-test
        llvm-profdata-14 merge -sparse -o default.prof default.profraw
        llvm-cov-14 export -format lcov -instr-profile default.prof ./someone_tests ../src/ > default.info

    - name: Upload lua coverage
      uses: codecov/codecov-action@v1
      with:
        file: /home/runner/work/someone/someone/_build/luacov.report.out

    - name: Upload C++ coverage
      uses: codecov/codecov-action@v1
      with:
        file: /home/runner/work/someone/someone/_build/default.info

  build-linux:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install deps
      run: |
        # Install a newer version of LLVM
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 14

        sudo apt-get update && sudo apt-get install -y build-essential cmake xorg-dev libgl-dev\
             libudev-dev libasound2-dev libpulse-dev libreadline-dev libncurses-dev libglew-dev\
             xvfb

    - name: Setup emsdk
      uses: mymindstorm/setup-emsdk@v11
      with:
        version: 3.1.13
        actions-cache-folder: 'emsdk-cache'

    # - name: Build the HTML5 version
    #   run: |
    #     mkdir $GITHUB_WORKSPACE/_build_emscripten && cd $GITHUB_WORKSPACE/_build_emscripten
    #     emcmake cmake .. -DCMAKE_BUILD_TYPE=Release
    #     emmake make -j $(nproc)
    #
    # - name: Copy the HTML5 version
    #   run: |
    #     sudo mkdir -p /someone-html5
    #     cd $GITHUB_WORKSPACE/_build_emscripten/
    #     sudo cp -r html5/* /someone-html5

    - name: Build
      run: |
        mkdir $GITHUB_WORKSPACE/_build && cd $GITHUB_WORKSPACE/_build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang-14 -DCMAKE_CXX_COMPILER=clang++-14
        make -j $(nproc)

    - name: Copy the release to /someone/someone-${{github.sha}}/
      run: |
        sudo mkdir -p /someone/someone-${{github.sha}}/
        cd $GITHUB_WORKSPACE/_build/
        sudo cp -r someone resources/ /someone/someone-${{github.sha}}/

    - name: Delete old artifacts
      uses: c-hive/gha-remove-artifacts@v1.1.0
      with:
        age: 1 day
        skip-tags: true

    # - name: Upload the HTML5 release artifact
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: "someone-${{github.sha}}-html5"
    #     path: "/someone-html5/"

    - name: Upload the release artifact
      uses: actions/upload-artifact@v2
      with:
        name: "someone-${{github.sha}}-linux"
        path: "/someone/"

    # - name: Upload the HTML5 release to itch.io
    #   if: ${{ github.event_name == 'release' }}
    #   env:
    #     BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
    #     CHANNEL: html5
    #     RELDIR: /someone-html5
    #   run: |
    #     curl -L -o butler.zip https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default
    #     unzip butler.zip && chmod +x butler
    #     ./butler push ${RELDIR} vaartis/someone:${CHANNEL} --userversion ${GITHUB_REF:10}

    - name: Upload release to itch.io
      if: ${{ github.event_name == 'release' }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: linux
        RELDIR: "/someone/"
      run: |
        ./butler push ${RELDIR} vaartis/someone:${CHANNEL} --userversion ${GITHUB_REF:10}


  build-windows:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install MSYS2 and dependencies
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          mingw-w64-x86_64-cmake mingw-w64-x86_64-clang mingw-w64-x86_64-freetype mingw-w64-x86_64-glew
          mingw-w64-i686-cmake mingw-w64-i686-clang mingw-w64-i686-freetype mingw-w64-i686-glew
          make
        path-type: inherit

    - name: Build x86_64
      shell: msys2 {0}
      run: |
        mkdir ${GITHUB_WORKSPACE}/_build && cd ${GITHUB_WORKSPACE}/_build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -G Unix\ Makefiles
        make -j $(nproc)

    - name: Copy the x86_64 release to /d/someone/someone-${{github.sha}}-x86_64/
      shell: msys2 {0}
      run: |
        cd ${GITHUB_WORKSPACE}/_build
        mkdir -p /d/someone-x86_64/someone-${{github.sha}}-x86_64/
        cp -r someone.exe resources\
              deps/lua/src/lua/src/lua53.dll /mingw64/bin/{libbrotlicommon.dll,libbrotlidec.dll,libbz2-1.dll,libfreetype-6.dll,\
        libgcc_s_seh-1.dll,libglib-2.0-0.dll,libgraphite2.dll,libharfbuzz-0.dll,libiconv-2.dll,libintl-8.dll,libpcre-1.dll,\
        libpng16-16.dll,libstdc++-6.dll,libwinpthread-1.dll,zlib1.dll}\
              /d/someone-x86_64/someone-${{github.sha}}-x86_64

    - name: Download butler
      if: ${{ github.event_name == 'release' }}
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/windows-amd64/LATEST/archive/default
        unzip butler.zip && chmod +x butler.exe

    - name: Build i686
      env:
        MSYSTEM: MINGW32
      shell: msys2 {0}
      run: |
        rm -rf ${GITHUB_WORKSPACE}/_build
        mkdir ${GITHUB_WORKSPACE}/_build && cd ${GITHUB_WORKSPACE}/_build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -G Unix\ Makefiles
        make -j $(nproc)

    - name: Copy the i686 release to /d/someone/someone-${{github.sha}}-i686/
      shell: msys2 {0}
      run: |
        cd ${GITHUB_WORKSPACE}/_build
        mkdir -p /d/someone-i686/someone-${{github.sha}}-i686/
        cp -r someone.exe resources\
              deps/lua/src/lua/src/lua53.dll /mingw32/bin/{libbrotlicommon.dll,libbrotlidec.dll,libbz2-1.dll,libfreetype-6.dll,\
        libgcc_s_dw2-1.dll,libglib-2.0-0.dll,libgraphite2.dll,libharfbuzz-0.dll,libiconv-2.dll,libintl-8.dll,libpcre-1.dll,\
        libpng16-16.dll,libstdc++-6.dll,libwinpthread-1.dll,zlib1.dll}\
              /d/someone-i686/someone-${{github.sha}}-i686

    - name: Upload the x86_64 release artifact
      uses: actions/upload-artifact@v2
      with:
        name: "someone-${{github.sha}}-windows-x86_64"
        path: "D:\\someone-x86_64"

    - name: Upload the i686 release artifact
      uses: actions/upload-artifact@v2
      with:
        name: "someone-${{github.sha}}-windows-i686"
        path: "D:\\someone-i686"

    - name: Upload the x86_64 release to itch.io
      shell: msys2 {0}
      if: ${{ github.event_name == 'release' }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: windows-x86_64
        RELDIR: "D:\\someone-x86_64"
      run: |
        ./butler push ${RELDIR} vaartis/someone:${CHANNEL} --userversion ${GITHUB_REF:10}

    - name: Upload the i686 release to itch.io
      shell: msys2 {0}
      if: ${{ github.event_name == 'release' }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: windows-i686
        RELDIR: "D:\\someone-i686"
      run: |
        ./butler push ${RELDIR} vaartis/someone:${CHANNEL} --userversion ${GITHUB_REF:10}

  build-macos:
    runs-on: macos-11
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Build
      run: |
        mkdir $GITHUB_WORKSPACE/_build && cd $GITHUB_WORKSPACE/_build
        cmake .. -DCMAKE_BUILD_TYPE=Release
        make -j $(nproc) install

    - name: Copy the release to /Users/runner/someone/someone-${{github.sha}}/
      run: |
        sudo mkdir -p /Users/runner/someone/someone-${{github.sha}}/
        cd $GITHUB_WORKSPACE/_build/
        sudo cp -r someone.app /Users/runner/someone/someone-${{github.sha}}/

    - name: Upload release to itch.io
      if: ${{ github.event_name == 'release' }}
      env:
        BUTLER_API_KEY: ${{ secrets.BUTLER_CREDENTIALS }}
        CHANNEL: macos
        RELDIR: "/Users/runner/someone"
      run: |
        curl -L -o butler.zip https://broth.itch.ovh/butler/darwin-amd64/LATEST/archive/default
        unzip butler.zip && chmod +x butler
        ./butler push ${RELDIR} vaartis/someone:${CHANNEL} --userversion ${GITHUB_REF:10}

    - name: Upload the release artifact
      uses: actions/upload-artifact@v2
      with:
        name: "someone-${{github.sha}}-macos"
        path: "/Users/runner/someone"
